using UnityEngine;

/// <summary>
/// Implements math functions not in Mathf
/// </summary>
public static class Utilities
{
    /// <summary>
    /// Generates a Gaussian variable with a given mean and standard deviation
    /// </summary>
    /// <param name="mean">The mean of the normal distribution from which to draw</param>
    /// <param name="sdev">The standard deviation of the normal distribution from which to draw</param>
    /// <returns>A Gaussian variable randomly chosen from the specified normal distribution</returns>
    public static float NormalDist(float mean = 0, float sdev = 1)
    {
        float r1 = Random.value + float.Epsilon;
        float r2 = Random.value + float.Epsilon;
        return mean + sdev * Mathf.Sqrt(-2.0f * Mathf.Log(r1)) * Mathf.Sin(2.0f * Mathf.PI * r2);
    }

    /// <summary>
    /// Uses a Markov model to choose a value in a given range based on the previous value
    /// </summary>
    /// <param name="previous">The previous value in this range</param>
    /// <param name="sdev">The standard deviation to use in our gaussian draw</param>
    /// <param name="min">The minimum allowed value</param>
    /// <param name="max">The maximum allowed value</param>
    /// <returns>A value between min and max generated by a Markov model</returns>
    public static float Markov(float previous, float sdev, float min, float max)
    {
        float value = NormalDist(previous, sdev);

        // If the draw exeeds min or max, reflect it back into the allowable range
        if (value < min)
        {
            value = Mathf.Min(max, min + (min - value));
        }
        else if (value > max)
        {
            value = Mathf.Max(min, max - (value - max));
        }

        return value;
    }
}
